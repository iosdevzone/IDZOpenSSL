#!/bin/bash
if [[ $BASH_SOURCE != $0 ]]; then echo "$BASH_SOURCE must be executed, not sourced."; return 255; fi

. idz_openssl_config.bash

CWD=`pwd`


#
# Combine libcrypto.a and libssl.a into libOpenSSL.a for all builds
#
for BUILD in $IDZ_OPENSSL_BUILDLIST
do
  pushd $IDZ_OPENSSL_BUILD_DIR/$BUILD/lib > /dev/null
  ar -x libcrypto.a
  ar -x libssl.a
#  ar -cr libOpenSSL.a *.o
  xcrun libtool -static -o libOpenSSL.a -no_warning_for_no_symbols *.o
  idz_config $BUILD
  TRIPLE=(${BUILD//-/ })
  ARCH=${TRIPLE[1]}
  xcrun -sdk ${SDK} clang ${MIN_VERSION_FLAG} -fembed-bitcode -dynamiclib -arch $ARCH -all_load libOpenSSL.a -o libOpenSSL.dylib
#  rm *.o
  popd > /dev/null
done

#
# Create dynamic and static fat libraries for all OSes
#
for OS in ios tvos watchos macosx ; do
  for SUFFIX in a dylib ; do
    OUTPUT_FILE_NAME=libOpenSSL.$SUFFIX
    OUTPUT_FILE_PATH=$IDZ_OPENSSL_BUILD_DIR/fatlib/$OS/$OUTPUT_FILE_NAME
    OS_PATTERN=$IDZ_OPENSSL_BUILD_DIR/$OS-'*-*'/lib/libOpenSSL.$SUFFIX
    OS_FILES=$(echo $OS_PATTERN)
    # OS_FILES holds the result of globbing OS_PATTERN, so if
    # these are equal there must have been no matches.
    if [[ "$OS_FILES" != "$OS_PATTERN" ]]; then
      echo "Creating Universal library $OUTPUT_FILE_NAME for $OS"
      mkdir -p $IDZ_OPENSSL_BUILD_DIR/fatlib/$OS
      lipo -create -output $OUTPUT_FILE_PATH $OS_FILES
    fi
  done
done

#
# Create a pseudo-framework for all (successfully bult) OSes
#
for OS in ios tvos watchos macosx ; do
  A_PATH=$IDZ_OPENSSL_BUILD_DIR/fatlib/$OS/libOpenSSL.a
  DYLIB_PATH=$IDZ_OPENSSL_BUILD_DIR/fatlib/$OS/libOpenSSL.dylib
  if [[ -e $A_PATH && -e $DYLIB_PATH ]] ; then
    FWBASE=$IDZ_OPENSSL_DIR/Frameworks/$OS-static/OpenSSL.framework
    if [ -e $FWBASE ] ; then
      rm -rf $FWBASE
    fi
    VERSIONBASE=$FWBASE/Verions/$IDZ_OPENSSL_VERSION
    mkdir -p $VERSIONBASE/lib
    cp -R $IDZ_OPENSSL_BUILD_DIR/ios-armv7-clang/include $VERSIONBASE
    cp $A_PATH $VERSIONBASE/lib
    cp $DYLIB_PATH $VERSIONBASE/lib

    pushd $FWBASE > /dev/null
    ln -s Verions/$IDZ_OPENSSL_VERSION/include/openssl Headers
    ln -s Verions/$IDZ_OPENSSL_VERSION/lib/libOpenSSL.a OpenSSL
    popd > /dev/null

    # Copy the module map
    mkdir $FWBASE/Modules
    cp $CWD/module.modulemap $FWBASE/Modules

    # Copy the umbrella header file
    cp $CWD/OpenSSL.h $FWBASE/Headers
    echo "Created framework in $FWBASE"
  fi
done

#
# Build the "real" dynamic frameworks using xcodebuild
#
xcodebuild -project OpenSSLFrameworkProjects/OpenSSL.xcodeproj -alltargets
rm -rf $IDZ_OPENSSL_DIR/Frameworks/tvos-dynamic
mv -f OpenSSLFrameworkProjects/build/Release-appletvos $IDZ_OPENSSL_DIR/Frameworks/tvos-dynamic
rm -rf $IDZ_OPENSSL_DIR/Frameworks/ios-dynamic
mv OpenSSLFrameworkProjects/build/Release-iphoneos $IDZ_OPENSSL_DIR/Frameworks/ios-dynamic
rm -rf $IDZ_OPENSSL_DIR/Frameworks/watchos-dynamic
mv OpenSSLFrameworkProjects/build/Release-watchos $IDZ_OPENSSL_DIR/Frameworks/watchos-dynamic
